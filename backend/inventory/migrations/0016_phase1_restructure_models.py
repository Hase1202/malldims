# Generated by Django 5.0.2 on 2025-08-11 18:59

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0015_remove_account_cost_tier'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='customerspecialprice',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='customerspecialprice',
            name='approved_by',
        ),
        migrations.RemoveField(
            model_name='customerspecialprice',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='customerspecialprice',
            name='customer',
        ),
        migrations.RemoveField(
            model_name='customerspecialprice',
            name='item',
        ),
        migrations.RemoveField(
            model_name='inventorybatch',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='inventorybatch',
            name='item',
        ),
        migrations.RemoveField(
            model_name='inventorychange',
            name='batch',
        ),
        migrations.RemoveField(
            model_name='inventorychange',
            name='item',
        ),
        migrations.RemoveField(
            model_name='inventorychange',
            name='transaction',
        ),
        migrations.RemoveField(
            model_name='itempricing',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='itempricing',
            name='item',
        ),
        migrations.RemoveField(
            model_name='customer',
            name='pricing_tier',
        ),
        migrations.RemoveField(
            model_name='item',
            name='availability_status',
        ),
        migrations.RemoveField(
            model_name='item',
            name='category',
        ),
        migrations.RemoveField(
            model_name='item',
            name='item_type',
        ),
        migrations.RemoveField(
            model_name='item',
            name='threshold_value',
        ),
        migrations.RemoveField(
            model_name='transaction',
            name='customer_name',
        ),
        migrations.RemoveField(
            model_name='transaction',
            name='is_receipt_issued',
        ),
        migrations.RemoveField(
            model_name='transaction',
            name='payment_status',
        ),
        migrations.RemoveField(
            model_name='transaction',
            name='priority_status',
        ),
        migrations.RemoveField(
            model_name='transaction',
            name='transaction_status',
        ),
        migrations.AddField(
            model_name='customer',
            name='platform',
            field=models.CharField(choices=[('whatsapp', 'WhatsApp'), ('messenger', 'Messenger'), ('viber', 'Viber'), ('business_suite', 'Business Suite')], default='whatsapp', help_text='Preferred communication platform', max_length=20),
        ),
        migrations.AddField(
            model_name='item',
            name='sku',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='uom',
            field=models.CharField(choices=[('pc', 'Piece'), ('pack', 'Pack')], default='pc', help_text='Unit of Measurement', max_length=10),
        ),
        migrations.AddField(
            model_name='transaction',
            name='is_or_sent',
            field=models.BooleanField(default=False, help_text='Whether the O.R./Invoice has been sent'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='is_paid',
            field=models.BooleanField(default=False, help_text='Whether the payment has been received'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='is_released',
            field=models.BooleanField(default=False, help_text='Whether the goods have been released/dispatched'),
        ),
        migrations.AlterField(
            model_name='transaction',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='transaction',
            name='due_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='transaction',
            name='notes',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='transaction',
            name='reference_number',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='transaction',
            name='transaction_type',
            field=models.CharField(choices=[('INCOMING', 'Incoming - Stock In from Brand'), ('OUTGOING', 'Outgoing - Stock Out to Customer')], help_text='Type of transaction: incoming stock or outgoing stock', max_length=20),
        ),
        migrations.CreateModel(
            name='CustomerBrandPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pricing_tier', models.CharField(choices=[('SRP', 'Suggested Retail Price'), ('RD', 'Regional Distributor'), ('PD', 'Provincial Distributor'), ('DD', 'District Distributor'), ('CD', 'City Distributor'), ('RS', 'Reseller'), ('SUB-RS', 'Sub-Reseller')], help_text='The pricing tier this customer gets for this brand', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.brand')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.customer')),
            ],
            options={
                'verbose_name': 'Customer Brand Pricing',
                'verbose_name_plural': 'Customer Brand Pricing',
                'db_table': 'customer_brand_pricing',
                'unique_together': {('customer', 'brand')},
            },
        ),
        migrations.CreateModel(
            name='CustomerSpecialPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount', models.DecimalField(decimal_places=2, help_text='Price reduction (must be negative value)', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.customer')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.item')),
            ],
            options={
                'verbose_name': 'Customer Special Pricing',
                'verbose_name_plural': 'Customer Special Pricing',
                'db_table': 'customer_special_pricing',
                'unique_together': {('customer', 'item')},
            },
        ),
        migrations.CreateModel(
            name='ItemTierPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pricing_tier', models.CharField(choices=[('SRP', 'Suggested Retail Price'), ('RD', 'Regional Distributor'), ('PD', 'Provincial Distributor'), ('DD', 'District Distributor'), ('CD', 'City Distributor'), ('RS', 'Reseller'), ('SUB-RS', 'Sub-Reseller')], help_text='The pricing tier this price applies to', max_length=10)),
                ('price', models.DecimalField(decimal_places=2, help_text='Standard price for this item at this tier', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tier_pricing', to='inventory.item')),
            ],
            options={
                'verbose_name': 'Item Tier Pricing',
                'verbose_name_plural': 'Item Tier Pricing',
                'db_table': 'item_tier_pricing',
                'unique_together': {('item', 'pricing_tier')},
            },
        ),
        migrations.CreateModel(
            name='TransactionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('pricing_tier', models.CharField(blank=True, choices=[('SRP', 'Suggested Retail Price'), ('RD', 'Regional Distributor'), ('PD', 'Provincial Distributor'), ('DD', 'District Distributor'), ('CD', 'City Distributor'), ('RS', 'Reseller'), ('SUB-RS', 'Sub-Reseller')], help_text='The pricing tier applied to this item', max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.item')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.transaction')),
            ],
            options={
                'db_table': 'transaction_item',
                'unique_together': {('transaction', 'item')},
            },
        ),
        migrations.DeleteModel(
            name='BatchSale',
        ),
        migrations.DeleteModel(
            name='CustomerSpecialPrice',
        ),
        migrations.DeleteModel(
            name='InventoryBatch',
        ),
        migrations.DeleteModel(
            name='InventoryChange',
        ),
        migrations.DeleteModel(
            name='ItemPricing',
        ),
    ]
